(define (cons a b) (cons a b))
(define (pair? x) (pair? x))
(define (car x) (car x))
(define (cdr x) (cdr x))
(define (+ a b) (+ a b))
(define (- a b) (- a b))
(define (* a b) (* a b))
(define (/ a b) (/ a b))
(define (= a b) (= a b))
(define (rem a b) (rem a b))
(define (< a b) (< a b))
(define (<= a b) (<= a b))
(define (> a b) (> a b))
(define (>= a b) (>= a b))

(define (zero? x)
  (= x 0))

(define (abs x)
  (if (< 0 x)
      x
      (- 0 x)))

(define (not x)
  (if x
      #f
      #t))

(define (reverse lst)
  (define (iter acc current)
    (if (pair? current)
        (iter (cons (car current) acc) (cdr current))
        acc))
  (iter nil lst))

(define (map f lst)
  (define (iter acc current)
    (if (pair? current)
        (iter (cons (f (car current)) acc) (cdr current))
        (reverse acc)))
  (iter nil lst))

(define (filter f lst)
  (define (iter acc current)
    (if (pair? current)
        (if (f (car current))
            (iter (cons (car current) acc) (cdr current))
            (iter acc (cdr current)))
        (reverse acc)))
  (iter nil lst))

(define (range from to step)
  (define (iter acc current)
    (if (> current to)
        (reverse acc)
        (iter (cons current acc) (+ current step))))
  (iter nil from))

(define (all? f lst)
  (define (iter current)
    (if (pair? current)
        (if (f (car current))
            (iter (cdr current))
            #f)
        #t))
  (iter lst))

(define (any? f lst)
  (define (iter current)
    (if (pair? current)
        (if (f (car current))
            #t
            (iter (cdr current)))
        #f))
  (iter lst))
